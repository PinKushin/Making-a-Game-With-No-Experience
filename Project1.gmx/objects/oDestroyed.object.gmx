<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sDestroyed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oProjectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Gibs Speed and Direction
InitialiseEnemyCollision(random_range (300,1500), random (360))

//When we're created remember our original position so we can come back to it
OriginalX = x
OriginalY = y

//Initially, Gib is not in Reassembling phase
Reassembling = false
//Nor has Gib ireturned to original position to respawn
InPosition = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Gibs Acceleration in speed lost per second, so room_speed factors into it twice

//Acceleration of Gibs while being sucked in
Acceleration = 300 / (room_speed * room_speed)
//Deceleration of Gibs while blowing up
Deceleration = 1500 / (room_speed * room_speed)

if Reassembling = false
{   //Gibs flying out from initial explosion
    if speed &gt; Deceleration
    {   
        //Face the direction we're going
        image_angle = direction
        //Reduce speed
        speed = speed - Deceleration
    }
    else
    {   //Gibs speed so low more subtracting will make it 0 or negative
        
        //stop completly
        speed = 0
        //Get ready to head in the opposite direction
        direction = direction + 180
        //Reassembly phase
        Reassembling = true
    }
}
else
{   //Gibs stopped and sucking back in
    //Increasing speed to suck in
    speed = speed + Acceleration
    
    //if our distance to our birthplace is so small that we're about to reach or go past it
    if point_distance (x, y, OriginalX, OriginalY) &lt; speed
    {   
        //stop Gib
        speed = 0
        
        //Did Gib only just arrive?
        if InPosition = false
        {   
            //Yes, we wern't InPosition before, so count us as having arrived
            oGame.GibsReassembled = oGame.GibsReassembled + 1
            //Remember that we are here and have already been counted
            InPosition = true
            audio_play_sound (aShoot,1,false)
        }
        
        //have all of the Gibs arrived yet?
        if oGame.GibsReassembled &gt;= oGame.TotalGibsToCreate
        {
            //Yes, the number of Gibs that have returned to position in how many came out
            instance_create (x, y, oPlayer)
            
            audio_play_sound (aGibArrive,1,false)
            //Destroy Gibs
            with oDestroyed 
                {
                instance_destroy()
                }
            //Reset Gibs count    
            oGame.GibsReassembled = 0
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
