<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sShrinkingEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_speed = 10 / room_speed

InitialiseEnemyCollision(90, random(360))

image_xscale = 0.5
image_yscale = image_xscale
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Eat Globs AI
DetectionRange = 400
EatRange = 10
NearestGlob = instance_nearest(x, y, oGlob)

//Is there a Glob?
if instance_exists (NearestGlob)
{
    //Is it near enough to see/smell it?
    DistanceToGlob = point_distance (x, y, NearestGlob.x, NearestGlob.y)
    if DistanceToGlob &lt; DetectionRange 
    {
        //OK but can I get there?
        if IHaveLineOfSiteTo (NearestGlob)
        {
            // Yes to all, seek the Glob!!
            direction = point_direction (x, y, NearestGlob.x, NearestGlob.y)
            if DistanceToGlob &lt; EatRange
            {
                with NearestGlob 
                {
                    instance_destroy ()
                }
                GrowthRate = 0.1
                MaximumSize = 2
                if image_xscale &lt; MaximumSize
                {
                    image_xscale = image_xscale + GrowthRate
                    image_yscale = image_xscale
                    if place_meeting (x, y, oSolid)
                    {
                        image_xscale = image_xscale - GrowthRate
                        image_yscale = image_xscale
                    }
                }
            }
        }
    }
}
/*Facing*/

image_angle = direction

EnemyCollisionWithSolids()
StayInsideRoom()

/* Damage*/

if HitByProjectile ()
{
    ///Shrinking///
    image_xscale = image_xscale - 0.2
    image_yscale = image_xscale
    
    //Create Power Up
    instance_create(x,y,oPowerUp)
    
    ///Suicide///
    if image_xscale&lt;=0
        {
            instance_destroy()
            audio_play_sound(aEnemyDeath,1,false)
        }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
